# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '3b14e023-50c5-4fa2-a87d-ff62bd9a88f1'
  imageRepository: 'bluegreen'
  containerRegistry: 'ngbluegreen.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/V2/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'blue-green'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - publish: manifests
      artifact: manifests
    
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Pipeline.Workspace)'
        ArtifactName: 's'
        publishLocation: 'Container'


- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'Approval'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@1
            displayName: Create imagePullSecret
            inputs:
              action: 'createSecret'
              connectionType: 'kubernetesServiceConnection'
              kubernetesServiceConnection: 'Blue-Green-VK'
              namespace: 'default'
              secretType: 'dockerRegistry'
              secretName: '$(imagePullSecret)'
              dockerRegistryEndpoint: '$(dockerRegistryServiceConnection)'

          - script: |
              cat $(Pipeline.Workspace)/s/s/V2/manifests/depl.yaml | sed "s/IMAGE_TAG/$(tag)/g" > deplV2.yaml
              cat deplV2.yaml
              pwd
          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'Blue-Green-VK'
              namespace: 'default'
              command: 'apply'
              arguments: '-f $(Pipeline.Workspace)/s/deplV2.yaml'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'

- stage: Status
  displayName: Check Status
  jobs:
  - job: 
    displayName: Status
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Kubernetes@1
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'Blue-Green-VK'
        namespace: 'default'
        command: 'rollout'
        arguments: 'status deployment hello-v2'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'

- stage: VS_Apply
  displayName: Apply VS
  dependsOn: Status
  jobs:
  - deployment: 
    displayName: Apply
    pool:
      vmImage: $(vmImageName)
    environment: 'Approval'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@1
            displayName: Create imagePullSecret
            inputs:
              action: 'createSecret'
              connectionType: 'kubernetesServiceConnection'
              kubernetesServiceConnection: 'Blue-Green-VK'
              namespace: 'default'
              secretType: 'dockerRegistry'
              secretName: '$(imagePullSecret)'
              dockerRegistryEndpoint: '$(dockerRegistryServiceConnection)'
          - task: KubernetesManifest@1
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: 'deploy'
              connectionType: 'kubernetesServiceConnection'
              kubernetesServiceConnection: 'Blue-Green-VK'
              namespace: 'default'
              manifests: '$(Pipeline.Workspace)/s/s/V2/manifests/vs.yaml'
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'
              imagePullSecrets: '$(imagePullSecret)'

- stage: Set_Image 
  displayName: Set Image 
  dependsOn: VS_Apply
  jobs:
  - deployment: 
    displayName: Set Image 
    pool:
      vmImage: $(vmImageName)
    environment: 'Approval'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'Blue-Green-VK'
              namespace: 'default'
              command: 'set'
              arguments: 'image deployment/hello-v1 hello=$(containerRegistry)/$(imageRepository):$(tag)'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
          - task: KubernetesManifest@1
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: 'deploy'
              connectionType: 'kubernetesServiceConnection'
              kubernetesServiceConnection: 'Blue-Green-VK'
              namespace: 'default'
              manifests: '$(Pipeline.Workspace)/manifests/vs.yaml'
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'
              imagePullSecrets: '$(imagePullSecret)'

- stage: Delete_deployment
  displayName: Delete Deployment
  dependsOn: Set_Image 
  jobs:
  - deployment: 
    displayName: Delete Deployment
    pool:
      vmImage: $(vmImageName)
    environment: 'Approval'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              sleep 30
              echo "Continuing with pipeline 30s delay"
            displayName: 'Introduce Delay' 
          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'Blue-Green-VK'
              namespace: 'default'
              command: 'delete'
              arguments: 'deployment hello-v2'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'

- stage: Rollback
  displayName: Rollback
  dependsOn: VS_Apply
  condition: failed()
  jobs:
  - deployment: 
    displayName: Rollback
    pool:
      vmImage: $(vmImageName)
    environment: 'Approval'
    strategy:
      runOnce:
        deploy:
          steps: 
          - task: KubernetesManifest@1
            displayName: Create imagePullSecret
            inputs:
              action: 'createSecret'
              connectionType: 'kubernetesServiceConnection'
              kubernetesServiceConnection: 'Blue-Green-VK'
              namespace: 'default'
              secretType: 'dockerRegistry'
              secretName: '$(imagePullSecret)'
              dockerRegistryEndpoint: '$(dockerRegistryServiceConnection)'
          - task: KubernetesManifest@1
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: 'deploy'
              connectionType: 'kubernetesServiceConnection'
              kubernetesServiceConnection: 'Blue-Green-VK'
              namespace: 'default'
              manifests: '$(Pipeline.Workspace)/manifests/vs.yaml'
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'
              imagePullSecrets: '$(imagePullSecret)'

          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'Blue-Green-VK'
              namespace: 'default'
              command: 'delete'
              arguments: 'deployment hello-v2'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'

